<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\media\Entity\Media;
use Drupal\file\Entity\File;

/**
 * Implements hook_theme().
 */
function br50_cfg_theme($existing, $type, $theme, $path) {

  return [
    'br50_block_image' => [
      'variables' => [
        'image' => NULL,
      ],
    ],
    'br50_block_text' => [
      'variables' => [
        'text' => NULL,
      ],
    ],
    'br50_block_image_gallery' => [
      'variables' => [
        'images' => NULL,
      ],
    ],
    'br50_block_remote_video' => [
      'variables' => [
        'video' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function br50_cfg_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // If on node add/edit for dugout, add custom submit.
  if (
    $form_id == 'node_br50_ct_dugout_edit_form' ||
    $form_id == 'node_br50_ct_dugout_form'
  ) {
    $form['actions']['submit']['#submit'][] = '_br50_cfg_dugout_form_submit';
  }
}

/**
 * Custom submit for dugout.
 *
 * @param array $form
 *   The form.
 * @param FormStateInterface $form_state
 *   The form state.
 */
function _br50_cfg_dugout_form_submit(array $form, FormStateInterface $form_state) {

  // Get the values from the form state.
  $values = $form_state->getValues();

  // If current issue is set, then set all others to
  // not be the current issue.
  if ($values['field_br50_dugout_current']['value']) {

    // Get the current nid so that we do not set
    // the value to not be current.
    $current_nid = $values['nid'];

    // Get all the current nodes that are dugout.
    $nodes = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->loadByProperties(
        [
          'type' => 'br50_ct_dugout',
          'status' => 1
        ]
      );

    // Step through each of the nodes and set
    // the current issue to false.
    foreach ($nodes as $node) {

      // If not the current node, set the current
      // issue to false.
      if ($node->id() !== $current_nid) {
        $node->field_br50_dugout_current = FALSE;
        $node->save();
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add views template suggestions.
 *
 * @inheritdoc
 */
function br50_cfg_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'views_view__' . $variables['view']->id();
}

/**
 * Implements hook_preprocess_views_view_field().
 */
function br50_cfg_preprocess_views_view_field(&$variables) {

  // Get view and field.
  $view = $variables['view'];
  $field = $variables['field'];

  // If we are on the dugout view and the global text,
  // replace the fid with the link to the dugout pdf.
  if (
    $view->id() == 'br50_view_dugout' &&
    $field->field == 'nothing'
  ) {

    // Get the output of the field.
    $output = $variables['output']->jsonSerialize();

    // If there is an integer with an href, get the mid.
    if (preg_match('/href\=\"(.*?)\"/', $output, $match) == 1) {
      $mid = $match[1];
    }

    // If there is an mid, replace with a link to the pdf.
    if ($mid) {

      // Get the media entity.
      $media = Media::load($mid);

      // Get the file id, since it can be different
      // from the media id.
      $fid = $media->field_media_document->target_id;

      // Get the file entity.
      $file = File::load($fid);

      // Get the uri of the file.
      $uri = $file->getFileUri();

      // Get the url from the uri.
      $url = \Drupal::service('file_url_generator')
        ->generateAbsoluteString($uri);

      // Replace the mid with the url to the pdf.
      $output = str_replace('"' . $mid . '"', '"' . $url . '"', $output);

      // Replace the output of the views field.
      $variables['output'] = [
        '#markup' => $output,
      ];
    }
  }
}
